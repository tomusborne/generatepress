<?xml version="1.0"?>
<ruleset name="GeneratePress">
	<description>Rules for GeneratePress</description>

	<!-- Exclude patterns. -->
	<exclude-pattern>/vendor/*</exclude-pattern>
	<exclude-pattern>/node_modules/*</exclude-pattern>
	<exclude-pattern>/assets/dist/*</exclude-pattern>
	<exclude-pattern>/tests/**</exclude-pattern>

	<!-- Pass some flags to PHPCS:
		 p flag: Show progress of the run.
		 s flag: Show sniff codes in all reports.
		 v flag: Print verbose output.
		 n flag: Do not print warnings.
	-->
	<arg value="psv"/>

	<!-- Run in parallel, it's faster. -->
	<arg name="parallel" value="8"/>

	<!-- Only check the PHP, CSS and SCSS files. JS files are checked separately with JSCS and JSHint. -->
	<arg name="extensions" value="php"/>

	<!-- Check all files in this directory and the directories below it. -->
	<file>.</file>

	<!-- Include the WordPress-Extra standard. -->
	<rule ref="WordPress-Extra">
		<!--
		We may want a middle ground though. The best way to do this is add the
		entire ruleset, then rule by rule, remove ones that don't suit a project.
		We can do this by running `phpcs` with the '-s' flag, which allows us to
		see the names of the sniffs reporting errors.
		Once we know the sniff names, we can opt to exclude sniffs which don't
		suit our project like so.
		-->
		<exclude name="WordPress.Files.FileName.InvalidClassFileName"/>
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase"/>
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase"/>
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound"/>
		<exclude name="WordPress.Arrays.MultipleStatementAlignment.DoubleArrowNotAligned"/>
		<exclude name="WordPress.PHP.StrictInArray.MissingTrueStrict"/>
		<exclude name="Generic.Files.LineEndings" />
		<exclude name="Generic.Formatting.MultipleStatementAlignment.NotSameWarning" />
		<exclude name="Generic.Commenting.DocComment.ShortNotCapital" />
		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
	</rule>

	<!-- Let's also check that everything is properly documented. -->
	<rule ref="WordPress-Docs"/>
	<rule ref="WPThemeReview"/>

	<rule ref="WordPress.WP.DeprecatedFunctions">
		<properties>
			<property name="minimum_supported_version" value="4.5" />
		</properties>
	</rule>

	<!-- We want to allow exceptions for the filename naming, since we are working with a theme. -->
	<!-- See https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#themes-allow-filename-exceptions -->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="is_theme" value="true"/>
		</properties>
	</rule>

	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" value="generatepress"/>
		</properties>
	</rule>

	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array">
				<element value="generate"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress-Extra">
		<!-- _e() and _ex() are considered safe for core translations. -->
		<exclude name="WordPress.Security.EscapeOutput.UnsafePrintingFunction"/>
	</rule>

	<rule ref="WPThemeReview">
		<!-- We always use get_template_part() where applicable. -->
		<exclude name="WPThemeReview.CoreFunctionality.FileInclude.FileIncludeFound"/>
	</rule>

	<rule ref="WordPress.Security.EscapeOutput">
		<properties>
			<property name="customAutoEscapedFunctions" type="array">
				<!-- i18n functions are considered safe for core translations. -->
				<element value="__"/>
				<element value="_x"/>
				<element value="_n"/>
				<element value="_nx"/>
				<element value="number_format_i18n"/>
				<element value="date_i18n"/>
			</property>
		</properties>
	</rule>

	<config name="testVersion" value="7.4-"/>

	<!--
		This is needed due to this bug: https://github.com/squizlabs/PHP_CodeSniffer/issues/2197
		For some reason the WPThemeReview ruleset ignores testVersion: https://github.com/WPTT/WPThemeReview/issues/228
	-->
	<rule ref="php-config.xml"/>

	<rule ref="PHPCompatibilityWP">
        <exclude name="PHPCompatibility.FunctionDeclarations.NewClosure.Found" />
		<exclude name="PHPCompatibility.FunctionUse.NewFunctions.preg_filterFound" />
    </rule>

	<!--
		Prevent errors caused by WordPress Coding Standards not supporting PHP 8.0+.
		See https://github.com/WordPress/WordPress-Coding-Standards/issues/2035
	-->
	<ini name="error_reporting" value="E_ALL &#38; ~E_DEPRECATED" />
</ruleset>
